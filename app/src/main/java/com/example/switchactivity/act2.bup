package com.example.switchactivity


import android.Manifest
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothManager
import android.bluetooth.BluetoothSocket
import android.content.Intent
import android.os.Build
import android.os.Bundle
import android.os.Handler
import android.os.ParcelUuid
import android.util.Log
import android.widget.Button
import android.widget.LinearLayout
import android.widget.Toast
import androidx.activity.result.ActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.ComposeView
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import data.chat.AndroidBluetoothController
import java.io.IOException
import java.io.InputStream
import java.io.OutputStream
import java.util.UUID


class MainActivity2 : AppCompatActivity() {
    private lateinit var scanButton: Button
    private lateinit var stopScanButton: Button
    private lateinit var blController: AndroidBluetoothController
    private var btPermission = false
    private val TAG = "FrugalLogs"
    private val REQUEST_ENABLE_BT = 1

    //We will use a Handler to get the BT Connection statys
    var handler: Handler? = null
    private val ERROR_READ = 0 // used in bluetooth handler to identify message update

    var arduinoBTModule: BluetoothDevice? = null
    var arduinoUUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB")
    private lateinit var actualThread: Thread

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main2)



        blController = AndroidBluetoothController(this)

        scanButton = findViewById(R.id.scanButton)
        scanButton.setOnClickListener {
            Toast.makeText(this, "clicked", Toast.LENGTH_LONG).show()
            val bluetoothManager = getSystemService(BluetoothManager::class.java)
            val bluetoothAdapter = bluetoothManager?.adapter
            if (bluetoothAdapter == null) {
                Toast.makeText(this, "This device doesn't support bluetooth", Toast.LENGTH_LONG)
                    .show()
            } else {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                    bluetoothPermissionLauncher.launch(Manifest.permission.BLUETOOTH_CONNECT)
                } else {
                    bluetoothPermissionLauncher.launch(Manifest.permission.BLUETOOTH_ADMIN)
                }
            }

            val containerLayout = findViewById<LinearLayout>(R.id.BluetoothDevicesContainer)
//            blController.startDiscovery()
//            val devices = blController.pairedDevices.value
            val devices = bluetoothAdapter?.bondedDevices?.iterator()
//            bluetoothAdapter.m
            Log.println(Log.WARN, "devicesScanned", "$devices")
            val getUuidsMethod = BluetoothAdapter::class.java.getDeclaredMethod("getUuids", null)
            val uuids = getUuidsMethod.invoke(bluetoothAdapter, null) as Array<ParcelUuid>

            if (uuids != null) {
                for (uuid in uuids) {
                    Log.d("uiidd", "UUID: " + uuid.uuid.toString())

                }
            } else {
                Log.d("uiidd", "Uuids not found, be sure to enable Bluetooth!")
            }

            if (devices != null) {
                for (el in devices) {
                    Log.println(Log.WARN, "devicesScanned", "${el?.name} ===> ${el.address}")
                    containerLayout.addView(
                        ComposeView(this).apply {
                            setContent {
                                BluetoothComponnentCard(
                                    name = el?.name,
                                    address = el.address,
//                                    onClick = factFun(uuids[0]),
                                    device = el
                                )
                            }
                        }
                    )
                }
            }


        }
    }



    private val bluetoothPermissionLauncher = registerForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { isGranted ->
        if (isGranted) {
            val bluetoothManager = getSystemService(BluetoothManager::class.java)
            val bluetoothAdapter = bluetoothManager?.adapter
            btPermission = true
            if (bluetoothAdapter?.isEnabled == false) {
                val enableBtIntent = Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)
                btActivityResultLauncher.launch(enableBtIntent)
            } else {
                btScan()
            }
        } else {
            btPermission = false
        }

    }
    private val btActivityResultLauncher = registerForActivityResult(
        ActivityResultContracts.StartActivityForResult()
    ) { result: ActivityResult ->
        if (result.resultCode == RESULT_OK) {
            btScan()
        }

    }

    private fun btScan() {
        Toast.makeText(this, "scann", Toast.LENGTH_LONG).show()
    }




}